#!/usr/bin/env python3

import sys
import os
import argparse
import logging
import datetime
import dateutil
import time
import tempfile
import subprocess
import atexit
import shutil
import json
import socket

from chaosindy.common import *
#from chaosindy.execute.execute import FabricExecutor, ParallelFabricExecutor
from chaosindy.actions.pool import clean_pool_by_genesis_file
from typing import Union, List, Dict

from io import StringIO

logger = logging.getLogger(__name__)

# Command-line Argument Parsing
def str2bool(v):
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError(
            'Boolean value (yes, no, true, false, y, n, 1, or 0) expected.')


LOG_LEVEL_HELP = """Logging level.
                      [LOG-LEVEL]: notset, debug, info, warning, error, critical
                      Default: info"""
levels = {
    'notset': logging.NOTSET,
    'debug': logging.DEBUG,
    'info': logging.INFO,
    'warning': logging.WARNING,
    'error': logging.ERROR,
    'critical': logging.CRITICAL
}

def log_level(v):
    if v.lower() in levels.keys():
        return levels[v.lower()]
    else:
        raise argparse.ArgumentTypeError(
            'Expected one of the following: {}.'.format(
                 ', '.join(levels.keys())))

def program_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('pool', help='The pool against which to run the ' \
                        'experiment(s). A directory with this name must exist' \
                        ' in the user\'s home directory that contains the ' \
                        ' following files (or at least symlinks to them):' \
                        ' 1. \'pool_transactions_genesis\'' \
                        ' 2. \'clients\' - Comma separated list of clients.' \
                        ' 3. \'ssh_config\' - One entry for each client and' \
                        ' node. See \'man ssh_config\' for details.' \
                        ' 4. PEM file(s). Use the optional pool-config-dir ' \
                        'argument if the directory containing these files is ' \
                        'located elsewhere on the client.')

    parser.add_argument('--pool-config-dir', help='The location of the ' \
                        'directory on the client that contains pool ' \
                        'configuration files. See \'pool\' argument help for ' \
                        'details. Default: user\'s home directory.',
                        default='~')

    parser.add_argument('-t', '--test', action='store_true',
                        default=False, help='Runs unit tests and exits.')

    parser.add_argument('-l', '--log-level', type=log_level, nargs='?',
                        const=logging.INFO, default=logging.INFO,
                        help=LOG_LEVEL_HELP)

    return parser

def parse_args(argv=None, parser=program_args()):
    return parser.parse_args(args=argv)

def log_level(v):
    if v.lower() in levels.keys():
        return levels[v.lower()]
    else:
        raise argparse.ArgumentTypeError(
            'Expected one of the following: {}.'.format(
                 ', '.join(levels.keys())))

def init(args):
    # Log to stdout
    # TODO: decide if logging to stdout is permanent
    ch = logging.StreamHandler(sys.stdout)
    ch.setLevel(args.log_level)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    logger.setLevel(args.log_level)
    logger.debug("Initializing...")
    logger.debug("args: %s", args)

def reset_pool(args):
    # TODO: Add functions to chaosindy repo/module to reset pool
    logger.debug("Resetting pool %s...", args.pool)
    genesis_file=os.path.join(os.path.expanduser(args.pool_config_dir), args.pool, 'pool_transactions_genesis')
    clean_pool_by_genesis_file(genesis_file=genesis_file)

def main(args):
    try:
        init(args)
    except Exception:
        logger.error('Unable to initialize script')
        raise
    reset_pool(args)


# **************
# *  UNIT TESTS !!!!! (use -t to run them)
# ***************
def test():
    print("The 'unittest' module is not available!\nUnable to run tests!")
    return 0


try:
    import unittest

    def test(args, module='__main__'):
        t = unittest.main(argv=['chaosindy_test'], module=module, exit=False,
                          verbosity=10)
        return int(not t.result.wasSuccessful())

    class TestRun(unittest.TestCase):
        test_pool = "test_pool1"

        @classmethod
        def setUpClass(cls):
            sys.stderr = StringIO()
            logger.setLevel(sys.maxsize)
            pass

        @classmethod
        def tearDownClass(cls):
            pass

        # TODO: need any static methods?
        #@staticmethod

        def test_arg_log_level(self):
            for k, v in levels.items():
                test_args = parse_args([self.test_pool, '-l', k])
                self.assertEqual(test_args.log_level, v)

            test_args = parse_args([self.test_pool, '-l'])
            self.assertEqual(test_args.log_level, logging.INFO,
                             msg='Invalid const level')
            test_args = parse_args([self.test_pool])
            self.assertEqual(test_args.log_level, logging.INFO,
                             msg='Invalid default level')
except ImportError:
    pass

if __name__ == '__main__':
    arguments = parse_args()

    if arguments.test:
        exit_code = test(arguments)
        sys.exit(exit_code)
    else:
        sys.exit(main(arguments))
