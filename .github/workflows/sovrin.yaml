name: indy-test-automation
on:
  # push:
  #   branches: [sovrin]
  workflow_call:
    inputs:
      ubuntuVersion:
        description: 'Version of Ubuntu base image'
        required: true
        type: string
        default: 'ubuntu-2004'
      libsovtokenJSON:
        description: "JSON encoded libsovtoken variables: install, version"
        required: true
        type: string
        default: "{\"install\": \"yes\",  \"version\": \"1.0.5\"}"
      tokenPluginJSON:
        description: "JSON encoded token plugin variables: install, sovtokenVersion, sovtokenfeesVersion"
        required: true
        type: string
        default: "{\"install\":\"yes\", \"sovtokenVersion\": \"1.2.0-dev1666268500\", \"sovtokenfeesVersion\":\"1.2.0-dev1666268500\"}"
      sovrinJSON:
        description: "JSON encoded sovrin variables: install"
        required: true
        type: string
        default: "{ \"install\": \"yes\"}"
      indyJSON:
        description: "JSON encoded indy variables: nodeVersion, plenumVersion, ursaVersion, pyzmqVersion"
        required: true
        type: string
        default: "{ \"nodeVersion\": \"1.13.2~rc3\", \"plenumVersion\" : \"1.13.1~rc2\", \"ursaVersion\": \"0.3.2-1\", \"pyzmqVersion\" : \"22.3.0\"}"
      libIndyVersion:
        description: 'Version of Libindy'
        required: true
        type: string
        default: "1.15.0~1625-bionic"
      networkJSON:
        description: "JSON encoded network variables: networkName, networkSubnet"
        required: false
        type: string
        default: "{\"networkName\": \"indy-test-automation-network\", \"networkSubnet\": \"10.0.0.0/24\"}"
      testDirectory:
        description: "The directory, relative to the indy-test-automantion project folder, containing the tests to be executed."
        required: false
        type: string
        default: "system/indy-node-tests"
      includePaymentTests:
        description: "Include payment tests.  Defaults to false."
        required: false
        type: boolean
        default: false
      testAutomationBranch:
        description: "Branch of Indy-Test-Automation to use"
        required: false
        type: string
        default: "sovrin"

  workflow_dispatch:
    inputs:
      ubuntuVersion:
        description: 'Version of Ubuntu base image'
        required: true
        type: string
        default: 'ubuntu-2004'
      libsovtokenJSON:
        description: "JSON encoded libsovtoken variables: install, version"
        required: true
        type: string
        default: "{\"install\": \"yes\",  \"version\": \"1.0.5\"}"
      tokenPluginJSON:
        description: "JSON encoded token plugin variables: install, sovtokenVersion, sovtokenfeesVersion"
        required: true
        type: string
        default: "{\"install\":\"yes\", \"sovtokenVersion\": \"1.2.0-dev1666268500\", \"sovtokenfeesVersion\":\"1.2.0-dev1666268500\"}"
      sovrinJSON:
        description: "JSON encoded sovrin variables: install"
        required: true
        type: string
        default: "{ \"install\": \"yes\"}"
      indyJSON:
        description: "JSON encoded indy variables: nodeVersion, plenumVersion, ursaVersion, pyzmqVersion"
        required: true
        type: string
        default: "{ \"nodeVersion\": \"1.13.2~rc3\", \"plenumVersion\" : \"1.13.1~rc2\", \"ursaVersion\": \"0.3.2-1\", \"pyzmqVersion\" : \"22.3.0\"}"
      libIndyVersion:
        description: 'Version of Libindy'
        required: true
        type: string
        default: "1.15.0~1625-bionic"
      networkJSON:
        description: "JSON encoded network variables: networkName, networkSubnet"
        required: false
        type: string
        default: "{\"networkName\": \"indy-test-automation-network\", \"networkSubnet\": \"10.0.0.0/24\"}"
      testDirectory:
        description: "The directory, relative to the indy-test-automantion project folder, containing the tests to be executed."
        required: false
        type: string
        default: "system/indy-node-tests"
      includePaymentTests:
        description: "Include payment tests.  Defaults to false."
        required: false
        type: boolean
        default: false
      testAutomationBranch:
        description: "Branch of Indy-Test-Automation to use"
        required: false
        type: string
        default: "sovrin"

env:
  INPUT_UBUNTUVERSION: ${{ inputs.ubuntuVersion }}

  INPUT_LIBSOVTOKEN_INSTALL: ${{ fromJSON(inputs.libsovtokenJSON).install }}
  INPUT_LIBSOVTOKEN_VERSION: ${{ fromJSON(inputs.libsovtokenJSON).version }}

  INPUT_TOKEN_PLUGINS_INSTALL: ${{ fromJSON(inputs.tokenPluginJSON).install }}
  INPUT_SOVTOKEN_VERSION: ${{ fromJSON(inputs.tokenPluginJSON).sovtokenVersion }}
  INPUT_SOVTOKENFEES_VERSION: ${{ fromJSON(inputs.tokenPluginJSON).sovtokenFeesVersion }}

  INPUT_SOVRIN_INSTALL: ${{ fromJSON(inputs.sovrinJSON).install }}

  INPUT_NODEVERSION: ${{ fromJSON(inputs.indyJSON).nodeVersion }}
  INPUT_PLENUMVERSION: ${{ fromJSON(inputs.indyJSON).plenumVersion }}
  INPUT_URSAVERSION: ${{ fromJSON(inputs.indyJSON).ursaVersion }}
  INPUT_PYZMQVERSION: ${{ fromJSON(inputs.indyJSON).pyzmqVersion }}

  INPUT_LIBINDYVERSION: ${{ inputs.libIndyVersion }}

  TEST_AUTOMATION_BRANCH: ${{ inputs.testAutomationBranch }}

  NETWORK_NAME: ${{ fromJSON(inputs.networkJSON).networkName }}
  NETWORK_SUBNET: ${{ fromJSON(inputs.networkJSON).networkSubnet }}
  TEST_DIRECTORY: ${{ inputs.testDirectory }}
  INCLUDE_PAYMENT_TESTS: ${{ inputs.includePaymentTests }}

jobs:
  workflow-setup:
    name: Initialize Workflow
    runs-on: ubuntu-20.04
    outputs:
      GITHUB_REPOSITORY_NAME: ${{ steps.repository-name.outputs.lowercase }}
      DIND_BUILD_ARG: ${{ steps.cache.outputs.DIND_BUILD_ARG}}
    steps:
      - name: Convert the GitHub repository name to lowercase
        id: repository-name
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - name: Set outputs
        id: cache
        run: |
          # Set variables according to version of ubuntu
          if [[ "${{ env.INPUT_UBUNTUVERSION }}" == "ubuntu-1604" ]]; then
            echo "DIND_BUILD_ARG=16.04" >> $GITHUB_OUTPUT
            echo "distribution=xenial" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ env.INPUT_UBUNTUVERSION }}" == "ubuntu-2004" ]]; then
            echo "DIND_BUILD_ARG=20.04" >> $GITHUB_OUTPUT
            echo "distribution=focal" >> $GITHUB_OUTPUT
          fi

  dind-image:
    name: Create DinD Image
    needs: workflow-setup
    runs-on: ubuntu-20.04
    env:
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}
      DIND_BUILD_ARG: ${{ needs.workflow-setup.outputs.DIND_BUILD_ARG }}
    steps:
      - name: Git checkout teracyhq/docker-files
        uses: actions/checkout@v3
        with:
          repository: teracyhq/docker-files

      - name: Prepare image labels and tags
        id: prep
        shell: bash
        run: |
          DOCKER_IMAGE=ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/dind
          TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${{ env.INPUT_UBUNTUVERSION }}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Log into the GitHub Container Registry
        if: steps.cache-image.outputs.cache-hit != 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: ./ubuntu/base
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          build-args: |
            UBUNTU_VERSION=${{ env.DIND_BUILD_ARG }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  node-image:
    name: Create Node Image
    needs: workflow-setup
    runs-on: ubuntu-20.04
    env:
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}
    steps:
      - name: Git checkout hyperledger/indy-test-automation
        uses: actions/checkout@v3
        with:
          repository: pschlarb/indy-test-automation
          ref: ${{ env.TEST_AUTOMATION_BRANCH }}

      - name: Prepare image labels and tags
        if: steps.cache-image.outputs.cache-hit != 'true'
        id: prep
        shell: bash
        run: |
          DOCKER_IMAGE=ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/node-${{ env.INPUT_UBUNTUVERSION }}
          # TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${{ env.INPUT_UBUNTUVERSION }}"
          TAGS="${DOCKER_IMAGE}:latest"
          echo "tags=${TAGS}" >>  $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >>  $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: steps.cache-image.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx
      - name: Download Pipeline sovrin.deb artifact
        uses: actions/download-artifact@v3
        with:
          name: sovrin.deb
          path: ./system/docker/node/
      - name: LS DEBUG
        run: ls ./system/docker/node/
      - name: Build and cache image
        if: steps.cache-image.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v3
        with:
          context: ./system/docker/node
          file: ./system/docker/node/Dockerfile.${{ env.INPUT_UBUNTUVERSION }}
          push: false
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            INDY_NODE_VERSION=${{ env.INPUT_NODEVERSION }}
            INDY_PLENUM_VERSION=${{ env.INPUT_PLENUMVERSION }}
            TOKEN_PLUGINS_INSTALL=${{ env.INPUT_TOKEN_PLUGINS_INSTALL }}
            SOVRIN_INSTALL=${{ env.INPUT_SOVRIN_INSTALL }}
            SOVTOKEN_VERSION=${{ env.INPUT_SOVTOKEN_VERSION }}
            SOVTOKENFEES_VERSION=${{ env.INPUT_SOVTOKENFEES_VERSION }}
            URSA_VERSION=${{ env.INPUT_URSAVERSION }}
            PYTHON3_PYZMQ_VERSION=${{ env.INPUT_PYZMQVERSION }}
          outputs: type=docker,dest=/tmp/node_image_${{ env.INPUT_UBUNTUVERSION }}.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Upload node docker image artifacts
        uses: actions/upload-artifact@v3
        with:
          name: node_image
          path: /tmp/node_image_${{ env.INPUT_UBUNTUVERSION }}.tar
          retention-days: 1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  client-image:
    name: Create Client Image
    needs: [ workflow-setup, dind-image ]
    runs-on: ubuntu-20.04
    env:
      CACHE_KEY_CLIENT: ${{ needs.workflow-setup.outputs.CACHE_KEY_CLIENT }}
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}
      DIND_BUILD_ARG: ${{ needs.workflow-setup.outputs.DIND_BUILD_ARG }}
    steps:
      - name: Git checkout hyperledger/indy-test-automation
        uses: actions/checkout@v3
        with:
          repository: pschlarb/indy-test-automation
          ref: ${{ env.TEST_AUTOMATION_BRANCH }}

      - name: Prepare image labels and tags
        id: prep
        shell: bash
        run: |
          DOCKER_IMAGE=ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/client
          TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${{ env.INPUT_UBUNTUVERSION }}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Build and cache image
        uses: docker/build-push-action@v3
        with:
          context: ./system/docker/client/
          file: ./system/docker/client/Dockerfile.${{ env.INPUT_UBUNTUVERSION }}
          push: false
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            LIBINDY_VERSION=${{ env.INPUT_LIBINDYVERSION}}
            DIND_CONTAINER_REGISTRY=ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}
            DIND_IMAGE_NAME=dind:${{ env.INPUT_UBUNTUVERSION }}
            LIBSOVTOKEN_INSTALL=${{ env.INPUT_LIBSOVTOKEN_INSTALL }}
            LIBSOVTOKEN_VERSION=${{ env.INPUT_LIBSOVTOKEN_VERSION }}
          outputs: type=docker,dest=/tmp/client_image_${{ env.INPUT_UBUNTUVERSION }}.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Upload client docker image artifacts
        uses: actions/upload-artifact@v3
        with:
          name: client_image
          path: /tmp/client_image_${{ env.INPUT_UBUNTUVERSION }}.tar
          retention-days: 1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  get-test-modules:
    name: Get Test Modules
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.get-module-list.outputs.file_names }}
    steps:
      - name: Git checkout hyperledger/indy-test-automation
        uses: actions/checkout@v3
        with:
          repository: pschlarb/indy-test-automation
          ref: ${{ env.TEST_AUTOMATION_BRANCH }}

      - name: Get Module List
        id: get-module-list
        uses: the-coding-turtle/ga-file-list@v0.4.1
        with:
          directory: ${{ env.TEST_DIRECTORY }}
          file_extension: "py"

          # ==============================================
          # Include all tests by default.
          # ==============================================
          only_files_starts_with: "test,Test"

          # ==============================================
          # Ignore specific test harnesses here
          # ----------------------------------------------
          # Ignore tests by renaming the file for the
          # test to have a prefix of "skip-". Line below
          # is not really needed, but left in to make
          # it clear the files are being ignored.
          # ==============================================
          ignore_files_starts_with: "skip-,TestEndorserSuite,TestLedgerSuite"

  ### 1 Job in workflow per test
  ### The tests rely on docker in docker with the fixed network name and fixed IP addresses.
  MatrixTest:
    name: MatrixTest
    needs: [ workflow-setup, node-image, client-image, get-test-modules]
    runs-on: ubuntu-20.04
    env:
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}
    strategy:
      matrix:
        module: ${{ fromJson(needs.get-test-modules.outputs.modules) }}
      fail-fast: false
    steps:
      - name: Git checkout hyperledger/indy-test-automation
        uses: actions/checkout@v3
        with:
          repository: pschlarb/indy-test-automation
          ref: ${{ env.TEST_AUTOMATION_BRANCH }}

      - name: Create docker network
        run: |
          docker network create --subnet="${{ env.NETWORK_SUBNET }}" "${{ env.NETWORK_NAME }}"

      - name: Download client artifact
        uses: actions/download-artifact@v3
        with:
          name: client_image
          path: /tmp

      - name: Download node artifact
        uses: actions/download-artifact@v3
        with:
          name: node_image
          path: /tmp

      - name: Load client and node image
        run: |
          docker load --input /tmp/client_image_${{ env.INPUT_UBUNTUVERSION }}.tar
          docker load --input /tmp/node_image_${{ env.INPUT_UBUNTUVERSION }}.tar

      - name: ${{ matrix.module }}
        id: test_Matrix
        run: |
          cd ./system/docker

          TEST_PARAMS="-l -v --junit-xml=${{ matrix.module }}-report.xml"
          if [[ ${INCLUDE_PAYMENT_TESTS} == "true" ]]; then
            TEST_PARAMS+="${TEST_PARAMS} --payments"
          fi

          UBUNTU_VERSION="${{ env.INPUT_UBUNTUVERSION }}" \
          IMAGE_REPOSITORY="ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/" \
          CLIENT_IMAGE="client:${{ env.INPUT_UBUNTUVERSION }}" \
          NODE_IMAGE="node-${{ env.INPUT_UBUNTUVERSION }}" \
          ./run.sh ${{ env.TEST_DIRECTORY }}/${{ matrix.module }}.py "${TEST_PARAMS}" ${{ env.NETWORK_NAME }}

      - name: Publish Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
        continue-on-error: true
        with:
          check_name: ${{ matrix.module }} Test Report
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: "*-report.xml"

      - name: Upload Detailed Test Failure Results
        # The test runner only emits the detailed test results if the tests fail.
        if: (steps.test_Matrix == 'failure') && failure()
        uses: actions/upload-artifact@v3
        with:
          name: detailed-test-result-test_consensus
          path: test-result-indy-test-automation-${{ matrix.module }}.txt
          retention-days: 5